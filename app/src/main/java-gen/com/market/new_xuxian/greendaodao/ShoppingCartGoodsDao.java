package com.market.new_xuxian.greendaodao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.market.new_xuxian.greendao.ShoppingCartGoods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SHOPPING_CART_GOODS.
*/
public class ShoppingCartGoodsDao extends AbstractDao<ShoppingCartGoods, Long> {

    public static final String TABLENAME = "SHOPPING_CART_GOODS";

    /**
     * Properties of entity ShoppingCartGoods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Cart_goods_nums = new Property(0, String.class, "cart_goods_nums", false, "CART_GOODS_NUMS");
        public final static Property Category_type = new Property(1, String.class, "category_type", false, "CATEGORY_TYPE");
        public final static Property Down_time = new Property(2, String.class, "down_time", false, "DOWN_TIME");
        public final static Property Endtime = new Property(3, String.class, "endtime", false, "ENDTIME");
        public final static Property Goods_type = new Property(4, String.class, "goods_type", false, "GOODS_TYPE");
        public final static Property Icon = new Property(5, String.class, "icon", false, "ICON");
        public final static Property Id = new Property(6, Integer.class, "id", false, "ID");
        public final static Property Is_del = new Property(7, String.class, "is_del", false, "IS_DEL");
        public final static Property Main_name = new Property(8, String.class, "main_name", false, "MAIN_NAME");
        public final static Property Market_price = new Property(9, String.class, "market_price", false, "MARKET_PRICE");
        public final static Property Newimg = new Property(10, String.class, "newimg", false, "NEWIMG");
        public final static Property Newprice = new Property(11, String.class, "newprice", false, "NEWPRICE");
        public final static Property Phonetips = new Property(12, String.class, "phonetips", false, "PHONETIPS");
        public final static Property Price = new Property(13, String.class, "price", false, "PRICE");
        public final static Property Real_name = new Property(14, String.class, "real_name", false, "REAL_NAME");
        public final static Property Selltype = new Property(15, String.class, "selltype", false, "SELLTYPE");
        public final static Property Show = new Property(16, String.class, "show", false, "SHOW");
        public final static Property Soft_no = new Property(17, String.class, "soft_no", false, "SOFT_NO");
        public final static Property Sold_num = new Property(18, Integer.class, "sold_num", false, "SOLD_NUM");
        public final static Property Starttime = new Property(19, String.class, "starttime", false, "STARTTIME");
        public final static Property Store_num = new Property(20, Integer.class, "store_num", false, "STORE_NUM");
        public final static Property Store_nums = new Property(21, Integer.class, "store_nums", false, "STORE_NUMS");
        public final static Property Tipsimg = new Property(22, String.class, "tipsimg", false, "TIPSIMG");
        public final static Property Title = new Property(23, String.class, "title", false, "TITLE");
        public final static Property Total_price_one = new Property(24, String.class, "total_price_one", false, "TOTAL_PRICE_ONE");
        public final static Property Unit = new Property(25, String.class, "unit", false, "UNIT");
        public final static Property Up_time = new Property(26, String.class, "up_time", false, "UP_TIME");
        public final static Property Userid = new Property(27, String.class, "userid", false, "USERID");
        public final static Property Account = new Property(28, Integer.class, "account", false, "ACCOUNT");
        public final static Property Pk = new Property(29, Long.class, "pk", true, "PK");
    };


    public ShoppingCartGoodsDao(DaoConfig config) {
        super(config);
    }
    
    public ShoppingCartGoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SHOPPING_CART_GOODS' (" + //
                "'CART_GOODS_NUMS' TEXT," + // 0: cart_goods_nums
                "'CATEGORY_TYPE' TEXT," + // 1: category_type
                "'DOWN_TIME' TEXT," + // 2: down_time
                "'ENDTIME' TEXT," + // 3: endtime
                "'GOODS_TYPE' TEXT," + // 4: goods_type
                "'ICON' TEXT," + // 5: icon
                "'ID' INTEGER," + // 6: id
                "'IS_DEL' TEXT," + // 7: is_del
                "'MAIN_NAME' TEXT," + // 8: main_name
                "'MARKET_PRICE' TEXT," + // 9: market_price
                "'NEWIMG' TEXT," + // 10: newimg
                "'NEWPRICE' TEXT," + // 11: newprice
                "'PHONETIPS' TEXT," + // 12: phonetips
                "'PRICE' TEXT," + // 13: price
                "'REAL_NAME' TEXT," + // 14: real_name
                "'SELLTYPE' TEXT," + // 15: selltype
                "'SHOW' TEXT," + // 16: show
                "'SOFT_NO' TEXT," + // 17: soft_no
                "'SOLD_NUM' INTEGER," + // 18: sold_num
                "'STARTTIME' TEXT," + // 19: starttime
                "'STORE_NUM' INTEGER," + // 20: store_num
                "'STORE_NUMS' INTEGER," + // 21: store_nums
                "'TIPSIMG' TEXT," + // 22: tipsimg
                "'TITLE' TEXT," + // 23: title
                "'TOTAL_PRICE_ONE' TEXT," + // 24: total_price_one
                "'UNIT' TEXT," + // 25: unit
                "'UP_TIME' TEXT," + // 26: up_time
                "'USERID' TEXT," + // 27: userid
                "'ACCOUNT' INTEGER," + // 28: account
                "'PK' INTEGER PRIMARY KEY AUTOINCREMENT );"); // 29: pk
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SHOPPING_CART_GOODS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ShoppingCartGoods entity) {
        stmt.clearBindings();
 
        String cart_goods_nums = entity.getCart_goods_nums();
        if (cart_goods_nums != null) {
            stmt.bindString(1, cart_goods_nums);
        }
 
        String category_type = entity.getCategory_type();
        if (category_type != null) {
            stmt.bindString(2, category_type);
        }
 
        String down_time = entity.getDown_time();
        if (down_time != null) {
            stmt.bindString(3, down_time);
        }
 
        String endtime = entity.getEndtime();
        if (endtime != null) {
            stmt.bindString(4, endtime);
        }
 
        String goods_type = entity.getGoods_type();
        if (goods_type != null) {
            stmt.bindString(5, goods_type);
        }
 
        String icon = entity.getIcon();
        if (icon != null) {
            stmt.bindString(6, icon);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(7, id);
        }
 
        String is_del = entity.getIs_del();
        if (is_del != null) {
            stmt.bindString(8, is_del);
        }
 
        String main_name = entity.getMain_name();
        if (main_name != null) {
            stmt.bindString(9, main_name);
        }
 
        String market_price = entity.getMarket_price();
        if (market_price != null) {
            stmt.bindString(10, market_price);
        }
 
        String newimg = entity.getNewimg();
        if (newimg != null) {
            stmt.bindString(11, newimg);
        }
 
        String newprice = entity.getNewprice();
        if (newprice != null) {
            stmt.bindString(12, newprice);
        }
 
        String phonetips = entity.getPhonetips();
        if (phonetips != null) {
            stmt.bindString(13, phonetips);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(14, price);
        }
 
        String real_name = entity.getReal_name();
        if (real_name != null) {
            stmt.bindString(15, real_name);
        }
 
        String selltype = entity.getSelltype();
        if (selltype != null) {
            stmt.bindString(16, selltype);
        }
 
        String show = entity.getShow();
        if (show != null) {
            stmt.bindString(17, show);
        }
 
        String soft_no = entity.getSoft_no();
        if (soft_no != null) {
            stmt.bindString(18, soft_no);
        }
 
        Integer sold_num = entity.getSold_num();
        if (sold_num != null) {
            stmt.bindLong(19, sold_num);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(20, starttime);
        }
 
        Integer store_num = entity.getStore_num();
        if (store_num != null) {
            stmt.bindLong(21, store_num);
        }
 
        Integer store_nums = entity.getStore_nums();
        if (store_nums != null) {
            stmt.bindLong(22, store_nums);
        }
 
        String tipsimg = entity.getTipsimg();
        if (tipsimg != null) {
            stmt.bindString(23, tipsimg);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(24, title);
        }
 
        String total_price_one = entity.getTotal_price_one();
        if (total_price_one != null) {
            stmt.bindString(25, total_price_one);
        }
 
        String unit = entity.getUnit();
        if (unit != null) {
            stmt.bindString(26, unit);
        }
 
        String up_time = entity.getUp_time();
        if (up_time != null) {
            stmt.bindString(27, up_time);
        }
 
        String userid = entity.getUserid();
        if (userid != null) {
            stmt.bindString(28, userid);
        }
 
        Integer account = entity.getAccount();
        if (account != null) {
            stmt.bindLong(29, account);
        }
 
        Long pk = entity.getPk();
        if (pk != null) {
            stmt.bindLong(30, pk);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29);
    }    

    /** @inheritdoc */
    @Override
    public ShoppingCartGoods readEntity(Cursor cursor, int offset) {
        ShoppingCartGoods entity = new ShoppingCartGoods( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // cart_goods_nums
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // category_type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // down_time
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endtime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goods_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // icon
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // is_del
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // main_name
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // market_price
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // newimg
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // newprice
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // phonetips
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // price
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // real_name
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // selltype
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // show
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // soft_no
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // sold_num
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // starttime
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // store_num
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // store_nums
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tipsimg
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // title
            cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24), // total_price_one
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // unit
            cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26), // up_time
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // userid
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // account
            cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29) // pk
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ShoppingCartGoods entity, int offset) {
        entity.setCart_goods_nums(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCategory_type(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDown_time(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndtime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoods_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIcon(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIs_del(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMain_name(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMarket_price(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setNewimg(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setNewprice(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setPhonetips(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setPrice(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setReal_name(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setSelltype(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setShow(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setSoft_no(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setSold_num(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setStarttime(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setStore_num(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setStore_nums(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setTipsimg(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setTitle(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setTotal_price_one(cursor.isNull(offset + 24) ? null : cursor.getString(offset + 24));
        entity.setUnit(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setUp_time(cursor.isNull(offset + 26) ? null : cursor.getString(offset + 26));
        entity.setUserid(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setAccount(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setPk(cursor.isNull(offset + 29) ? null : cursor.getLong(offset + 29));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ShoppingCartGoods entity, long rowId) {
        entity.setPk(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ShoppingCartGoods entity) {
        if(entity != null) {
            return entity.getPk();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
