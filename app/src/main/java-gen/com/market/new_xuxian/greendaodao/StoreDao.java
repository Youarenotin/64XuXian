package com.market.new_xuxian.greendaodao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.market.new_xuxian.greendao.Store;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table STORE.
*/
public class StoreDao extends AbstractDao<Store, Long> {

    public static final String TABLENAME = "STORE";

    /**
     * Properties of entity Store.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "ID");
        public final static Property Area = new Property(1, String.class, "area", false, "AREA");
        public final static Property Area_id = new Property(2, String.class, "area_id", false, "AREA_ID");
        public final static Property Bdate = new Property(3, String.class, "bdate", false, "BDATE");
        public final static Property Bstarttime = new Property(4, String.class, "bstarttime", false, "BSTARTTIME");
        public final static Property City_area = new Property(5, String.class, "city_area", false, "CITY_AREA");
        public final static Property City_id = new Property(6, String.class, "city_id", false, "CITY_ID");
        public final static Property City_name = new Property(7, String.class, "city_name", false, "CITY_NAME");
        public final static Property Distance = new Property(8, String.class, "distance", false, "DISTANCE");
        public final static Property Firsttime = new Property(9, String.class, "firsttime", false, "FIRSTTIME");
        public final static Property Lat = new Property(10, Double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(11, Double.class, "lng", false, "LNG");
        public final static Property Message_alert = new Property(12, String.class, "message_alert", false, "MESSAGE_ALERT");
        public final static Property Starttime = new Property(13, String.class, "starttime", false, "STARTTIME");
        public final static Property Telphone = new Property(14, String.class, "telphone", false, "TELPHONE");
        public final static Property Title = new Property(15, String.class, "title", false, "TITLE");
        public final static Property Is_click = new Property(16, Integer.class, "is_click", false, "IS_CLICK");
        public final static Property Store_attr = new Property(17, Integer.class, "store_attr", false, "STORE_ATTR");
        public final static Property Store_status = new Property(18, Integer.class, "store_status", false, "STORE_STATUS");
        public final static Property Type = new Property(19, Integer.class, "type", false, "TYPE");
    };


    public StoreDao(DaoConfig config) {
        super(config);
    }
    
    public StoreDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'STORE' (" + //
                "'ID' INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "'AREA' TEXT," + // 1: area
                "'AREA_ID' TEXT," + // 2: area_id
                "'BDATE' TEXT," + // 3: bdate
                "'BSTARTTIME' TEXT," + // 4: bstarttime
                "'CITY_AREA' TEXT," + // 5: city_area
                "'CITY_ID' TEXT," + // 6: city_id
                "'CITY_NAME' TEXT," + // 7: city_name
                "'DISTANCE' TEXT," + // 8: distance
                "'FIRSTTIME' TEXT," + // 9: firsttime
                "'LAT' REAL," + // 10: lat
                "'LNG' REAL," + // 11: lng
                "'MESSAGE_ALERT' TEXT," + // 12: message_alert
                "'STARTTIME' TEXT," + // 13: starttime
                "'TELPHONE' TEXT," + // 14: telphone
                "'TITLE' TEXT," + // 15: title
                "'IS_CLICK' INTEGER," + // 16: is_click
                "'STORE_ATTR' INTEGER," + // 17: store_attr
                "'STORE_STATUS' INTEGER," + // 18: store_status
                "'TYPE' INTEGER);"); // 19: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'STORE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Store entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String area = entity.getArea();
        if (area != null) {
            stmt.bindString(2, area);
        }
 
        String area_id = entity.getArea_id();
        if (area_id != null) {
            stmt.bindString(3, area_id);
        }
 
        String bdate = entity.getBdate();
        if (bdate != null) {
            stmt.bindString(4, bdate);
        }
 
        String bstarttime = entity.getBstarttime();
        if (bstarttime != null) {
            stmt.bindString(5, bstarttime);
        }
 
        String city_area = entity.getCity_area();
        if (city_area != null) {
            stmt.bindString(6, city_area);
        }
 
        String city_id = entity.getCity_id();
        if (city_id != null) {
            stmt.bindString(7, city_id);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(8, city_name);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(9, distance);
        }
 
        String firsttime = entity.getFirsttime();
        if (firsttime != null) {
            stmt.bindString(10, firsttime);
        }
 
        Double lat = entity.getLat();
        if (lat != null) {
            stmt.bindDouble(11, lat);
        }
 
        Double lng = entity.getLng();
        if (lng != null) {
            stmt.bindDouble(12, lng);
        }
 
        String message_alert = entity.getMessage_alert();
        if (message_alert != null) {
            stmt.bindString(13, message_alert);
        }
 
        String starttime = entity.getStarttime();
        if (starttime != null) {
            stmt.bindString(14, starttime);
        }
 
        String telphone = entity.getTelphone();
        if (telphone != null) {
            stmt.bindString(15, telphone);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(16, title);
        }
 
        Integer is_click = entity.getIs_click();
        if (is_click != null) {
            stmt.bindLong(17, is_click);
        }
 
        Integer store_attr = entity.getStore_attr();
        if (store_attr != null) {
            stmt.bindLong(18, store_attr);
        }
 
        Integer store_status = entity.getStore_status();
        if (store_status != null) {
            stmt.bindLong(19, store_status);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(20, type);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Store readEntity(Cursor cursor, int offset) {
        Store entity = new Store( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // area
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // area_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // bdate
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bstarttime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city_area
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // city_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // city_name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // distance
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // firsttime
            cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10), // lat
            cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11), // lng
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // message_alert
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // starttime
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // telphone
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // title
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // is_click
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // store_attr
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // store_status
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Store entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setArea(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setArea_id(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBdate(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBstarttime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity_area(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCity_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCity_name(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDistance(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFirsttime(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setLat(cursor.isNull(offset + 10) ? null : cursor.getDouble(offset + 10));
        entity.setLng(cursor.isNull(offset + 11) ? null : cursor.getDouble(offset + 11));
        entity.setMessage_alert(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setStarttime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setTelphone(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setTitle(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIs_click(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setStore_attr(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setStore_status(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setType(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Store entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Store entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
